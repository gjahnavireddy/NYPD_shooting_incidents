# -*- coding: utf-8 -*-
"""Project-3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZKx0PCUcY6ZpSiT0jA_gj1Vhnjre4W-v
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
!pip install ydata-profiling
!pip install plotly
from pandas_profiling import ProfileReport
# %matplotlib inline
import matplotlib.pyplot as plt

import seaborn as sns

from google.colab import files
file = files.upload()
data = pd.read_csv("NYPD_Shooting_Incident_Data__Historic_.csv")
data.head()

from google.colab import drive
drive.mount('/content/drive')

# Specify the file path on your Google Drive
file_path = '/content/drive/MyDrive/NYPD_Shooting_Incident_Data__Historic_.csv'

# Read the CSV file
df = pd.read_csv(file_path)

data.head()

data.info()

data.isnull().sum()

data.columns

data.drop(columns=['LOC_OF_OCCUR_DESC', 'LOC_CLASSFCTN_DESC'], inplace=True)

data.isnull().sum()

data['PRECINCT'].fillna('Unknown',inplace=True)
data['JURISDICTION_CODE'].fillna('Unknown',inplace=True)
data['LOCATION_DESC'].fillna('Unknown',inplace=True)
data['STATISTICAL_MURDER_FLAG'].fillna('Unknown',inplace=True)
data['PERP_AGE_GROUP'].fillna('Unknown',inplace=True)
data['PERP_SEX'].fillna('Unknown',inplace=True)
data['PERP_RACE'].fillna('Unknown',inplace=True)
data['Latitude'].fillna('Unknown',inplace=True)
data['Longitude'].fillna('Unknown',inplace=True)
data['Lon_Lat'].fillna('Unknown',inplace=True)

data.isnull().sum()

data['OCCUR_DATE'] = pd.to_datetime(data['OCCUR_DATE'])

# Filter data for Brooklyn and Queens
bk_qn_data = data[data['BORO'].isin(['BROOKLYN', 'QUEENS'])]

# Sample 500 incidents for the heatmap
bk_qn_sample = bk_qn_data.sample(n=500, random_state=2)

# Plotting the Location Heatmap for Brooklyn and Queens
plt.figure(figsize=(10, 6))
plt.scatter(bk_qn_sample['Longitude'], bk_qn_sample['Latitude'], alpha=0.5, c='red')
plt.title('Location Heatmap of Shooting Incidents in Brooklyn and Queens (Sampled)')
plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.grid(True)
plt.show()



import plotly.express as px

data['OCCUR_DATE'] = pd.to_datetime(data['OCCUR_DATE'])

# Filter data for Brooklyn and Queens
bk_qn_data = data[data['BORO'].isin(['BROOKLYN', 'QUEENS'])]
# Assuming bk_qn_data is your filtered data for Brooklyn and Queens
# Calculate the count of incidents by victim age group
victim_age_group_bk_qn = bk_qn_data['VIC_AGE_GROUP'].value_counts().reset_index()
victim_age_group_bk_qn.columns = ['Age Group', 'Count']

# Create the Victim Age Group Analysis using Plotly
fig_age_group = px.bar(
    victim_age_group_bk_qn,
    x='Age Group',
    y='Count',
    title='Victim Age Group Distribution in Brooklyn and Queens',
    color='Age Group',  # Assign different colors for different age groups
    labels={'Count':'Number of Incidents', 'Age Group':'Victim Age Group'}
)
fig_age_group.show()

from bokeh.plotting import figure, show, output_file
from bokeh.models import ColumnDataSource
data['OCCUR_DATE'] = pd.to_datetime(data['OCCUR_DATE'])

# Filter data for Brooklyn and Queens
bk_qn_data = data[data['BORO'].isin(['BROOKLYN', 'QUEENS'])]
# Prepare the data for Bokeh
borough_analysis = bk_qn_data['BORO'].value_counts()
source = ColumnDataSource(data=dict(boroughs=borough_analysis.index, counts=borough_analysis.values, color=["blue", "green"]))

# Create the Bokeh plot - Bar Chart for Borough Analysis
p = figure(x_range=borough_analysis.index.tolist(), title="Shooting Incidents in Brooklyn vs. Queens", toolbar_location=None, tools="")
p.vbar(x='boroughs', top='counts', width=0.9, color='color', legend_field="boroughs", source=source)

p.xgrid.grid_line_color = None
p.y_range.start = 0
p.yaxis.axis_label = "Number of Incidents"
p.xaxis.axis_label = "Borough"
p.legend.orientation = "horizontal"
p.legend.location = "top_center"

# Output to an interactive HTML file (uncomment the next line to generate the file)
output_file("borough_shooting_incidents.html")

# Show the plot
show(p)

mapbox_access_token = 'pk.eyJ1IjoiamFobmF2aTAzMTEiLCJhIjoiY2x0bjVobjdxMDM3YTJubW55eGljYjgxOSJ9.cbkevjgoBH-hHa7Z9FyrlA'

# Sample data to reduce map clutter
sampled_data = bk_qn_data.sample(n=500, random_state=1)

fig = px.scatter_mapbox(sampled_data, lat="Latitude", lon="Longitude",
                        color_discrete_sequence=["fuchsia"], zoom=10, height=600)
fig.update_layout(mapbox={"accesstoken": mapbox_access_token, "style": "light"}, showlegend=False)
fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
fig.show()

import pandas as pd
import plotly.express as px

# Load your dataset
# Replace 'your_dataset.csv' with the path to your CSV file
data = pd.read_csv('NYPD_Shooting_Incident_Data__Historic_.csv')

# Create a scatter plot on Mapbox using Plotly Express
fig = px.scatter_mapbox(data, lat='Latitude', lon='Longitude', hover_name='BORO', hover_data=['VIC_AGE_GROUP'],
                        zoom=10, title='Scatter Plot on Mapbox', height=600)

# Update the Mapbox style
fig.update_layout(mapbox_style='open-street-map')

# Show the plot
fig.show()

import pandas as pd
import plotly.express as px

# Load your dataset
# Replace 'your_dataset.csv' with the path to your CSV file
data = pd.read_csv('NYPD_Shooting_Incident_Data__Historic_.csv')

# Create the density heatmap using Plotly Express
fig = px.density_mapbox(data, lat='Latitude', lon='Longitude', zoom=10,
                        mapbox_style='carto-positron',
                        title='Mapbox Density Heatmap of BORO and LOCATION_DESC')

# Show the plot
fig.show()

import pandas as pd
import plotly.express as px

# Load your dataset
# Replace 'your_dataset.csv' with the path to your CSV file
data = pd.read_csv('NYPD_Shooting_Incident_Data__Historic_.csv')

# Assuming 'data' contains your DataFrame
# Create a stacked histogram using Plotly Express
fig = px.histogram(data, x='OCCUR_DATE', color='BORO',
                   title='Distribution of Shooting Incidents by Day of the Week and Borough',
                   labels={'OCCUR_DATE': 'Day of the Week', 'count': 'Count of Shooting Incidents'},
                   barmode='stack')

# Show the plot
fig.show()

# Extract the year from the 'OCCUR_DATE' column
data['OCCUR_DATE'] = pd.to_datetime(data['OCCUR_DATE'])
data['Year'] = data['OCCUR_DATE'].dt.year

# Group by year and borough, then count the number of incidents
incidents_by_year_borough = data.groupby(['Year', 'BORO']).size().reset_index(name='Incidents')

# Create the bar plot using Plotly Express
import plotly.express as px
fig = px.bar(incidents_by_year_borough, x='Year', y='Incidents', color='BORO',
             title='Number of Shooting Incidents by Year and Borough')
fig.show()

import plotly.express as px
import pandas as pd

# Assuming 'data' contains your DataFrame
data = pd.read_csv('NYPD_Shooting_Incident_Data__Historic_.csv')

# Create the plot using Plotly Express
fig = px.histogram(data, x='LOCATION_DESC', color='VIC_SEX',
                   title='Distribution of Shooting Incidents by Location and Victim Sex',
                   labels={'LOCATION_DESC': 'Location Description', 'VIC_SEX': 'Victim Sex', 'count': 'Count of Incidents'},
                   barmode='stack')

# Show the plot
fig.show()

import pandas as pd
import plotly.express as px



# Convert 'OCCUR_DATE' column to datetime format
data['OCCUR_DATE'] = pd.to_datetime(data['OCCUR_DATE'])

# Plot the distribution of shooting incidents by borough as a pie chart
fig = px.pie(data, names='BORO', title='Distribution of Shooting Incidents by Borough')
fig.show() $